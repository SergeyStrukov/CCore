/* test0060.SHA.cpp */ 
//----------------------------------------------------------------------------------------
//
//  Project: CCore 1.02
//
//  Tag: General
//
//  License: Boost Software License - Version 1.0 - August 17th, 2003 
//
//            see http://www.boost.org/LICENSE_1_0.txt or the local copy
//
//  Copyright (c) 2011 Sergey Strukov. All rights reserved.
//
//----------------------------------------------------------------------------------------

#include <CCore/test/test.h>

#include <CCore/inc/crypton/SHA.h> 
#include <CCore/inc/Random.h> 

namespace App {

namespace Private_0060 {

/* struct Data1 */

struct Data1
 {
  typedef Crypton::SHA1 Func;
  
  static const uint8 Input[3];
  static const uint8 Digest[20];
 };

const uint8 Data1::Input[3]={'a','b','c'};

const uint8 Data1::Digest[20]=
 {
  0xA9, 0x99, 0x3E, 0x36,
  0x47, 0x06, 0x81, 0x6A,
  0xBA, 0x3E, 0x25, 0x71,
  0x78, 0x50, 0xC2, 0x6C,
  0x9C, 0xD0, 0xD8, 0x9D
 };

/* struct Data2 */

struct Data2
 {
  typedef Crypton::SHA1 Func;
  
  static const uint8 Input[56];
  static const uint8 Digest[20];
 };

const uint8 Data2::Input[56]=
 {
  'a','b','c','d',
  'b','c','d','e',
  'c','d','e','f',
  'd','e','f','g',
  'e','f','g','h',
  'f','g','h','i',
  'g','h','i','j',
  'h','i','j','k',
  'i','j','k','l',
  'j','k','l','m',
  'k','l','m','n',
  'l','m','n','o',
  'm','n','o','p',
  'n','o','p','q'
 };

const uint8 Data2::Digest[20]=
 {
  0x84, 0x98, 0x3E, 0x44,
  0x1C, 0x3B, 0xD2, 0x6E,
  0xBA, 0xAE, 0x4A, 0xA1,
  0xF9, 0x51, 0x29, 0xE5,
  0xE5, 0x46, 0x70, 0xF1
 };

/* struct Data3 */

struct Data3
 {
  typedef Crypton::SHA256 Func;
  
  static const uint8 Input[3];
  static const uint8 Digest[32];
 };

const uint8 Data3::Input[3]={'a','b','c'};

const uint8 Data3::Digest[32]=
 {
  0xBA, 0x78, 0x16, 0xBF,
  0x8F, 0x01, 0xCF, 0xEA,
  0x41, 0x41, 0x40, 0xDE,
  0x5D, 0xAE, 0x22, 0x23,
  0xB0, 0x03, 0x61, 0xA3,
  0x96, 0x17, 0x7A, 0x9C,
  0xB4, 0x10, 0xFF, 0x61,
  0xF2, 0x00, 0x15, 0xAD
 };

/* struct Data4 */

struct Data4
 {
  typedef Crypton::SHA256 Func;
  
  static const uint8 Input[56];
  static const uint8 Digest[32];
 };

const uint8 Data4::Input[56]=
 {
  'a','b','c','d',
  'b','c','d','e',
  'c','d','e','f',
  'd','e','f','g',
  'e','f','g','h',
  'f','g','h','i',
  'g','h','i','j',
  'h','i','j','k',
  'i','j','k','l',
  'j','k','l','m',
  'k','l','m','n',
  'l','m','n','o',
  'm','n','o','p',
  'n','o','p','q'
 };

const uint8 Data4::Digest[32]=
 {
  0x24, 0x8D, 0x6A, 0x61,
  0xD2, 0x06, 0x38, 0xB8,
  0xE5, 0xC0, 0x26, 0x93,
  0x0C, 0x3E, 0x60, 0x39,
  0xA3, 0x3C, 0xE4, 0x59,
  0x64, 0xFF, 0x21, 0x67,
  0xF6, 0xEC, 0xED, 0xD4,
  0x19, 0xDB, 0x06, 0xC1
 };

/* struct Data5 */

struct Data5
 {
  typedef Crypton::SHA224 Func;
  
  static const uint8 Input[3];
  static const uint8 Digest[28];
 };

const uint8 Data5::Input[3]={'a','b','c'};

const uint8 Data5::Digest[28]=
 {
  0x23, 0x09, 0x7D, 0x22,
  0x34, 0x05, 0xD8, 0x22,
  0x86, 0x42, 0xA4, 0x77,
  0xBD, 0xA2, 0x55, 0xB3,
  0x2A, 0xAD, 0xBC, 0xE4,
  0xBD, 0xA0, 0xB3, 0xF7,
  0xE3, 0x6C, 0x9D, 0xA7
 };

/* struct Data6 */

struct Data6
 {
  typedef Crypton::SHA224 Func;
  
  static const uint8 Input[56];
  static const uint8 Digest[28];
 };

const uint8 Data6::Input[56]=
 {
  'a','b','c','d',
  'b','c','d','e',
  'c','d','e','f',
  'd','e','f','g',
  'e','f','g','h',
  'f','g','h','i',
  'g','h','i','j',
  'h','i','j','k',
  'i','j','k','l',
  'j','k','l','m',
  'k','l','m','n',
  'l','m','n','o',
  'm','n','o','p',
  'n','o','p','q'
 };

const uint8 Data6::Digest[28]=
 {
  0x75, 0x38, 0x8B, 0x16,
  0x51, 0x27, 0x76, 0xCC,
  0x5D, 0xBA, 0x5D, 0xA1,
  0xFD, 0x89, 0x01, 0x50,
  
  0xB0, 0xC6, 0x45, 0x5C,
  0xB4, 0xF5, 0x8B, 0x19,
  0x52, 0x52, 0x25, 0x25
 };

/* struct Data7 */

struct Data7
 {
  typedef Crypton::SHA512 Func;
  
  static const uint8 Input[3];
  static const uint8 Digest[64];
 };

const uint8 Data7::Input[3]={'a','b','c'};

const uint8 Data7::Digest[64]=
 {
  0xDD, 0xAF, 0x35, 0xA1, 0x93, 0x61, 0x7A, 0xBA,
  0xCC, 0x41, 0x73, 0x49, 0xAE, 0x20, 0x41, 0x31,
  0x12, 0xE6, 0xFA, 0x4E, 0x89, 0xA9, 0x7E, 0xA2,
  0x0A, 0x9E, 0xEE, 0xE6, 0x4B, 0x55, 0xD3, 0x9A,
  0x21, 0x92, 0x99, 0x2A, 0x27, 0x4F, 0xC1, 0xA8,
  0x36, 0xBA, 0x3C, 0x23, 0xA3, 0xFE, 0xEB, 0xBD,
  0x45, 0x4D, 0x44, 0x23, 0x64, 0x3C, 0xE8, 0x0E,
  0x2A, 0x9A, 0xC9, 0x4F, 0xA5, 0x4C, 0xA4, 0x9F
 };

/* struct Data8 */

struct Data8
 {
  typedef Crypton::SHA512 Func;
  
  static const uint8 Input[112];
  static const uint8 Digest[64];
 };

const uint8 Data8::Input[112]=
 {
  'a','b','c','d','e','f','g','h',
  'b','c','d','e','f','g','h','i',
  'c','d','e','f','g','h','i','j',
  'd','e','f','g','h','i','j','k',
  'e','f','g','h','i','j','k','l',
  'f','g','h','i','j','k','l','m',
  'g','h','i','j','k','l','m','n',
  'h','i','j','k','l','m','n','o',
  'i','j','k','l','m','n','o','p',
  'j','k','l','m','n','o','p','q',
  'k','l','m','n','o','p','q','r',
  'l','m','n','o','p','q','r','s',
  'm','n','o','p','q','r','s','t',
  'n','o','p','q','r','s','t','u'
 };

const uint8 Data8::Digest[64]=
 {
  0x8E, 0x95, 0x9B, 0x75, 0xDA, 0xE3, 0x13, 0xDA,
  0x8C, 0xF4, 0xF7, 0x28, 0x14, 0xFC, 0x14, 0x3F,
  0x8F, 0x77, 0x79, 0xC6, 0xEB, 0x9F, 0x7F, 0xA1,
  0x72, 0x99, 0xAE, 0xAD, 0xB6, 0x88, 0x90, 0x18,
  0x50, 0x1D, 0x28, 0x9E, 0x49, 0x00, 0xF7, 0xE4,
  0x33, 0x1B, 0x99, 0xDE, 0xC4, 0xB5, 0x43, 0x3A,
  0xC7, 0xD3, 0x29, 0xEE, 0xB6, 0xDD, 0x26, 0x54,
  0x5E, 0x96, 0xE5, 0x5B, 0x87, 0x4B, 0xE9, 0x09
 };

/* struct Data9 */

struct Data9
 {
  typedef Crypton::SHA384 Func;
  
  static const uint8 Input[3];
  static const uint8 Digest[48];
 };

const uint8 Data9::Input[3]={'a','b','c'};

const uint8 Data9::Digest[48]=
 {
  0xCB, 0x00, 0x75, 0x3F, 0x45, 0xA3, 0x5E, 0x8B,
  0xB5, 0xA0, 0x3D, 0x69, 0x9A, 0xC6, 0x50, 0x07,
  0x27, 0x2C, 0x32, 0xAB, 0x0E, 0xDE, 0xD1, 0x63,
  0x1A, 0x8B, 0x60, 0x5A, 0x43, 0xFF, 0x5B, 0xED,
  0x80, 0x86, 0x07, 0x2B, 0xA1, 0xE7, 0xCC, 0x23,
  0x58, 0xBA, 0xEC, 0xA1, 0x34, 0xC8, 0x25, 0xA7
 };

/* struct Data10 */

struct Data10
 {
  typedef Crypton::SHA384 Func;
  
  static const uint8 Input[112];
  static const uint8 Digest[48];
 };

const uint8 Data10::Input[112]=
 {
  'a','b','c','d','e','f','g','h',
  'b','c','d','e','f','g','h','i',
  'c','d','e','f','g','h','i','j',
  'd','e','f','g','h','i','j','k',
  'e','f','g','h','i','j','k','l',
  'f','g','h','i','j','k','l','m',
  'g','h','i','j','k','l','m','n',
  'h','i','j','k','l','m','n','o',
  'i','j','k','l','m','n','o','p',
  'j','k','l','m','n','o','p','q',
  'k','l','m','n','o','p','q','r',
  'l','m','n','o','p','q','r','s',
  'm','n','o','p','q','r','s','t',
  'n','o','p','q','r','s','t','u'
 };

const uint8 Data10::Digest[48]=
 {
  0x09, 0x33, 0x0C, 0x33, 0xF7, 0x11, 0x47, 0xE8,
  0x3D, 0x19, 0x2F, 0xC7, 0x82, 0xCD, 0x1B, 0x47,
  0x53, 0x11, 0x1B, 0x17, 0x3B, 0x3B, 0x05, 0xD2,
  0x2F, 0xA0, 0x80, 0x86, 0xE3, 0xB0, 0xF7, 0x12,
  0xFC, 0xC7, 0xC7, 0x1A, 0x55, 0x7E, 0x2D, 0xB9,
  0x66, 0xC3, 0xE9, 0xFA, 0x91, 0x74, 0x60, 0x39
 };

/* testData<T>() */

template <class T>
void testData()
 {
  typename T::Func hash;
  uint8 digest[T::Func::DigestLen];
  
  hash.add(Range(T::Input));
  
  hash.finish(digest);
  
  //Printf(Con,"\n#;\n",PrintDump(Range(digest)));
  
  if( !Range(digest).equal(T::Digest) )
    {
     Printf(Exception,"#; failed",T::Func::GetName());
    }
 }

/* struct CData1 */

struct CData1
 {
  typedef Crypton::SHA1 Func;
  
  static const uint8 Ch = 'a' ;
  static const ulen Len = 1000000 ;
  static const uint8 Digest[20];
 };

const uint8 CData1::Digest[20]=
 {
  0x34, 0xAA, 0x97, 0x3C,
  0xD4, 0xC4, 0xDA, 0xA4,
  0xF6, 0x1E, 0xEB, 0x2B,
  0xDB, 0xAD, 0x27, 0x31,
  0x65, 0x34, 0x01, 0x6F
 };

/* struct CData2 */

struct CData2
 {
  typedef Crypton::SHA256 Func;
  
  static const uint8 Ch = 'a' ;
  static const ulen Len = 1000000 ;
  static const uint8 Digest[32];
 };

const uint8 CData2::Digest[32]=
 {
  0xCD, 0xC7, 0x6E, 0x5C,
  0x99, 0x14, 0xFB, 0x92,
  0x81, 0xA1, 0xC7, 0xE2,
  0x84, 0xD7, 0x3E, 0x67,
  0xF1, 0x80, 0x9A, 0x48,
  0xA4, 0x97, 0x20, 0x0E,
  0x04, 0x6D, 0x39, 0xCC,
  0xC7, 0x11, 0x2C, 0xD0
 };

/* struct CData3 */

struct CData3
 {
  typedef Crypton::SHA224 Func;
  
  static const uint8 Ch = 'a' ;
  static const ulen Len = 1000000 ;
  static const uint8 Digest[28];
 };

const uint8 CData3::Digest[28]=
 {
  0x20, 0x79, 0x46, 0x55,
  0x98, 0x0C, 0x91, 0xD8,
  0xBB, 0xB4, 0xC1, 0xEA,
  0x97, 0x61, 0x8A, 0x4B,
  
  0xF0, 0x3F, 0x42, 0x58,
  0x19, 0x48, 0xB2, 0xEE,
  0x4E, 0xE7, 0xAD, 0x67
 };

/* struct CData4 */

struct CData4
 {
  typedef Crypton::SHA512 Func;
  
  static const uint8 Ch = 'a' ;
  static const ulen Len = 1000000 ;
  static const uint8 Digest[64];
 };

const uint8 CData4::Digest[64]=
 {
  0xE7, 0x18, 0x48, 0x3D, 0x0C, 0xE7, 0x69, 0x64,
  0x4E, 0x2E, 0x42, 0xC7, 0xBC, 0x15, 0xB4, 0x63,
  0x8E, 0x1F, 0x98, 0xB1, 0x3B, 0x20, 0x44, 0x28,
  0x56, 0x32, 0xA8, 0x03, 0xAF, 0xA9, 0x73, 0xEB,
  0xDE, 0x0F, 0xF2, 0x44, 0x87, 0x7E, 0xA6, 0x0A,
  0x4C, 0xB0, 0x43, 0x2C, 0xE5, 0x77, 0xC3, 0x1B,
  0xEB, 0x00, 0x9C, 0x5C, 0x2C, 0x49, 0xAA, 0x2E,
  0x4E, 0xAD, 0xB2, 0x17, 0xAD, 0x8C, 0xC0, 0x9B
 };

/* struct CData5 */

struct CData5
 {
  typedef Crypton::SHA384 Func;
  
  static const uint8 Ch = 'a' ;
  static const ulen Len = 1000000 ;
  static const uint8 Digest[48];
 };

const uint8 CData5::Digest[48]=
 {
  0x9D, 0x0E, 0x18, 0x09, 0x71, 0x64, 0x74, 0xCB,
  0x08, 0x6E, 0x83, 0x4E, 0x31, 0x0A, 0x4A, 0x1C,
  0xED, 0x14, 0x9E, 0x9C, 0x00, 0xF2, 0x48, 0x52,
  0x79, 0x72, 0xCE, 0xC5, 0x70, 0x4C, 0x2A, 0x5B,
  0x07, 0xB8, 0xB3, 0xDC, 0x38, 0xEC, 0xC4, 0xEB,
  0xAE, 0x97, 0xDD, 0xD8, 0x7F, 0x3D, 0x89, 0x85
 };

/* testCData<T>() */

template <class T>
void testCData()
 {
  Random random;
  typename T::Func hash;
  uint8 digest[T::Func::DigestLen];
  
  uint8 input[100];
  
  Range(input).set(T::Ch);

  for(ulen len=T::Len; len ;)
    {
     ulen delta=random.select(1,Min(len,DimOf(input)));
     
     hash.add(input,delta);
     
     len-=delta;
    }
  
  hash.finish(digest);
  
  //Printf(Con,"\n#;\n",PrintDump(Range(digest)));
  
  if( !Range(digest).equal(T::Digest) )
    {
     Printf(Exception,"#; failed",T::Func::GetName());
    }
 }

/* struct KData1 */

struct KData1
 {
  typedef Crypton::KeyedSHA1 Func;
  
  static const uint8 Data[9];
  
  static const uint8 Key[64];
  
  static const uint8 Digest[20];
 };

const uint8 KData1::Data[9]=
 {
  'S','a','m','p','l','e',' ','#','1'
 };

const uint8 KData1::Key[64]=
 {
  0x00, 0x01, 0x02, 0x03,
  0x04, 0x05, 0x06, 0x07,
  0x08, 0x09, 0x0A, 0x0B,
  0x0C, 0x0D, 0x0E, 0x0F,

  0x10, 0x11, 0x12, 0x13,
  0x14, 0x15, 0x16, 0x17,
  0x18, 0x19, 0x1A, 0x1B,
  0x1C, 0x1D, 0x1E, 0x1F,

  0x20, 0x21, 0x22, 0x23,
  0x24, 0x25, 0x26, 0x27,
  0x28, 0x29, 0x2A, 0x2B,
  0x2C, 0x2D, 0x2E, 0x2F,

  0x30, 0x31, 0x32, 0x33,
  0x34, 0x35, 0x36, 0x37,
  0x38, 0x39, 0x3A, 0x3B,
  0x3C, 0x3D, 0x3E, 0x3F
 };

const uint8 KData1::Digest[20]=
 {
  0x4F, 0x4C, 0xA3, 0xD5,
  0xD6, 0x8B, 0xA7, 0xCC,
  0x0A, 0x12, 0x08, 0xC9,
  0xC6, 0x1E, 0x9C, 0x5D,
  0xA0, 0x40, 0x3C, 0x0A
 };

/* struct KData2 */

struct KData2
 {
  typedef Crypton::KeyedSHA1 Func;
  
  static const uint8 Data[9];
  
  static const uint8 Key[20];
  
  static const uint8 Digest[20];
 };

const uint8 KData2::Data[9]=
 {
  'S','a','m','p','l','e',' ','#','2'
 };

const uint8 KData2::Key[20]=
 {
  0x30, 0x31, 0x32, 0x33,
  0x34, 0x35, 0x36, 0x37,
  0x38, 0x39, 0x3A, 0x3B,
  0x3C, 0x3D, 0x3E, 0x3F,
  0x40, 0x41, 0x42, 0x43
 };

const uint8 KData2::Digest[20]=
 {
  0x09, 0x22, 0xD3, 0x40,
  0x5F, 0xAA, 0x3D, 0x19,
  0x4F, 0x82, 0xA4, 0x58,
  0x30, 0x73, 0x7D, 0x5C,
  0xC6, 0xC7, 0x5D, 0x24
 };

/* struct KData3 */

struct KData3
 {
  typedef Crypton::KeyedSHA1 Func;
  
  static const uint8 Data[9];
  
  static const uint8 Key[100];
  
  static const uint8 Digest[20];
 };

const uint8 KData3::Data[9]=
 {
  'S','a','m','p','l','e',' ','#','3'
 };

const uint8 KData3::Key[100]=
 {
  0x50, 0x51, 0x52, 0x53,
  0x54, 0x55, 0x56, 0x57,
  0x58, 0x59, 0x5A, 0x5B,
  0x5C, 0x5D, 0x5E, 0x5F,
  
  0x60, 0x61, 0x62, 0x63,
  0x64, 0x65, 0x66, 0x67,
  0x68, 0x69, 0x6A, 0x6B,
  0x6C, 0x6D, 0x6E, 0x6F,
  
  0x70, 0x71, 0x72, 0x73,
  0x74, 0x75, 0x76, 0x77,
  0x78, 0x79, 0x7A, 0x7B,
  0x7C, 0x7D, 0x7E, 0x7F,
  
  0x80, 0x81, 0x82, 0x83,
  0x84, 0x85, 0x86, 0x87,
  0x88, 0x89, 0x8A, 0x8B,
  0x8C, 0x8D, 0x8E, 0x8F,
  
  0x90, 0x91, 0x92, 0x93,
  0x94, 0x95, 0x96, 0x97,
  0x98, 0x99, 0x9A, 0x9B,
  0x9C, 0x9D, 0x9E, 0x9F,
  
  0xA0, 0xA1, 0xA2, 0xA3,
  0xA4, 0xA5, 0xA6, 0xA7,
  0xA8, 0xA9, 0xAA, 0xAB,
  0xAC, 0xAD, 0xAE, 0xAF,
  
  0xB0, 0xB1, 0xB2, 0xB3
 };

const uint8 KData3::Digest[20]=
 {
  0xBC, 0xF4, 0x1E, 0xAB,
  0x8B, 0xB2, 0xD8, 0x02,
  0xF3, 0xD0, 0x5C, 0xAF,
  0x7C, 0xB0, 0x92, 0xEC,
  0xF8, 0xD1, 0xA3, 0xAA
 };

/* testKeyed<T>() */

template <class T>
void testKeyed()
 {
  typename T::Func hash;

  hash.key(Range(T::Key));
  
  hash.add(Range(T::Data));
  
  uint8 digest[T::Func::DigestLen];
  
  hash.finish(digest);
  
  Printf(Con,"\n#;\n",PrintDump(Range(digest)));
  
  if( !Range(digest).equal(T::Digest) )
    {
     Printf(Exception,"#; failed",T::Func::GetName());
    }
 }

} // namespace Private_0060
 
using namespace Private_0060; 
 
/* Testit<60> */ 

template<>
const char *const Testit<60>::Name="Test60 SHA";

template<>
bool Testit<60>::Main() 
 {
  testData<Data1>();
  testData<Data2>();
  testData<Data3>();
  testData<Data4>();
  testData<Data5>();
  testData<Data6>();
  testData<Data7>();
  testData<Data8>();
  testData<Data9>();
  testData<Data10>();
  
  testCData<CData1>();
  testCData<CData2>();
  testCData<CData3>();
  testCData<CData4>();
  testCData<CData5>();
  
  testKeyed<KData1>();
  testKeyed<KData2>();
  testKeyed<KData3>();
  
  return true;
 }
 
} // namespace App
 
