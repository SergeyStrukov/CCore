/* DDL.lang */

// BODY -----------------------------------------------------------------------

! BODY
 {
                               : start
                         
  BODY SCOPE                   : ext_SCOPE
  BODY INCLUDE                 : ext_INCLUDE
  BODY TYPE                    : ext_TYPE 
  BODY CONST                   : ext_CONST
  BODY STRUCT ;                : ext_STRUCT
 }

SCOPE
 {
  scope Name { BODY `}         : build
 }

INCLUDE
 {
  include FileName             : includeFile
 }

TYPE
 {
  type Name = TYPEDEF ;        : build 
 }

CONST
 {
  TYPEDEF Name = EXPR ;        : build
 }
 
// names ---------------------------------------------------------------------- 

RNAME
 {
  Name                         : start
  RNAME # Name                 : ext
 }

NAME
 {
  RNAME                        : rel
  # RNAME                      : abs
  . # RNAME                    : dot  
  Dots # RNAME                 : dots
 }

INAME
 {
  int                          : intName
  sint                         : sintName
  uint                         : uintName
  ulen                         : ulenName
  sint8                        : sint8Name
  uint8                        : uint8Name
  sint16                       : sint16Name 
  uint16                       : uint16Name 
  sint32                       : sint32Name 
  uint32                       : uint32Name 
  sint64                       : sint64Name 
  uint64                       : uint64Name 
 }

TNAME
 {
  INAME                        : cast
  
  text                         : text
  ip                           : ip
 }
 
// TYPEDEF -------------------------------------------------------------------- 

TYPEDEF
 {
  NAME                         : namedType
  TNAME                        : baseType
  TYPEDEF *                    : ptrType
  TYPEDEF [ ]                  : arrayType
  TYPEDEF [ EXPR ]             : arrayLenType
  STRUCT                       : structType
 }

// STRUCT ---------------------------------------------------------------------

STRUCT
 {
  struct Name { SBODY `}       : build
 }

SBODY
 {
                               : start
                         
  SBODY TYPE                   : ext_TYPE
  SBODY const CONST            : ext_CONST
  SBODY STRUCT ;               : ext_STRUCT 
   
  SBODY TYPEDEF Name ;         : ext_field  
  SBODY TYPEDEF Name = EXPR ;  : ext_fieldVal
 }

// EXPR -----------------------------------------------------------------------

EXPR : LIST , ADD , MUL , UN , NUM , POST , PRIM
 {
  ( EXPR )                     : cast_EXPR  = PRIM
  
  NAME                         : cast_NAME  = PRIM
  NNLIT                        : cast_NNLIT = PRIM 
  
  ITYPE ( EXPR )               : opDomain   = PRIM
  
  EXPR.a [ EXPR ]              : if( a>=NUM ) opInd        = POST
  
  EXPR.a . Name                : if( a>=POST ) opSelect    = POST
  EXPR.a -> Name               : if( a>=POST ) opPtrSelect = POST
  
  Number                       : cast_Number = NUM
  
  * EXPR.a                     : if( a>=UN ) opAst   = UN
  & EXPR.a                     : if( a>=UN ) opAmp   = UN
  + EXPR.a                     : if( a>=UN ) opPlus  = UN
  - EXPR.a                     : if( a>=UN ) opMinus = UN
  
  EXPR.a * EXPR.b              : if( a>=MUL & b>=UN ) opMul = MUL
  EXPR.a / EXPR.b              : if( a>=MUL & b>=UN ) opDiv = MUL
  EXPR.a % EXPR.b              : if( a>=MUL & b>=UN ) opRem = MUL
  
  EXPR.a + EXPR.b              : if( a>=ADD & b>=MUL ) opAdd = ADD
  EXPR.a - EXPR.b              : if( a>=ADD & b>=MUL ) opSub = ADD
  
  { `}                         : emptyExprList      = LIST
  { ELIST `}                   : buildExprList      = LIST
  { NELIST `}                  : buildNamedExprList = LIST
  EXPR { `}                    : applyEmpty         = LIST
  EXPR { NELIST `}             : applyNamedExprList = LIST
 }

// ----------------------------------------------------------------------------

ELIST
 {
  EXPR                         : start
  ELIST , EXPR                 : ext
 }
 
NEXPR
 {
  . Name = EXPR                : build
 }

NELIST
 {
  NEXPR                        : start
  NELIST , NEXPR               : ext
 }

// ----------------------------------------------------------------------------

ITYPE
 {
  NAME                         : type_NAME
  INAME                        : type_INAME
 }

NNLIT
 {
  null                         : cast_null
  String                       : cast_String
  Number . Number . Number . Number : buildIP 
 }

// ----------------------------------------------------------------------------


