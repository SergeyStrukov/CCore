/* CPP.lang */
//----------------------------------------------------------------------------------------
//
//  Project: CPP-Parser 1.00
//
//  License: Boost Software License - Version 1.0 - August 17th, 2003 
//
//            see http://www.boost.org/LICENSE_1_0.txt or the local copy
//
//  Copyright (c) 2013 Sergey Strukov. All rights reserved.
//
//----------------------------------------------------------------------------------------

! TEST
 {
  @ATTRIBUTES        ATTRIBUTES           : test@ATTRIBUTES
  
  @NAME              NAME                 : test@NAME
  @TYPE_NAME         TYPE_NAME            : test@TYPE_NAME
  @DECLTYPE          DECLTYPE             : test@DECLTYPE
  @TEMPLATE_ID       TEMPLATE_ID          : test@TEMPLATE_ID
  @QUALIFIED_ID      QUALIFIED_ID         : test@QUALIFIED_ID
  @UNQUALIFIED_ID    UNQUALIFIED_ID       : test@UNQUALIFIED_ID
  
  @ENUM_SPEC         ENUM_SPEC            : test@ENUM_SPEC
  @DECL_OPAQUE_ENUM  DECL_OPAQUE_ENUM     : test@DECL_OPAQUE_ENUM
  @INIT              INIT                 : test@INIT 
 }

/*----- ATTRIBUTES (attribute-specifier-seq-opt) ---------------------------------------*/

//
// define
//
//   ATTRIBUTES
//
// required
// 
//   TYPE_ID_OR_EXPR_ASSIGN
//

ATTRIBUTES                   // attribute-specifier-seq-opt
 {
                                                 : start      
  ATTRIBUTES ATTR_COMMON                         : ext@COMMON 
  ATTRIBUTES ATTR_ALIGN                          : ext@ALIGN  
 }
 
ATTR_COMMON
 {
  [ [ ATTR_LIST ] ]                              : build
 } 
 
ATTR_LIST
 {
  ATTR_ITEM                                      : start
  ATTR_LIST , ATTR_ITEM                          : ext
 }
 
ATTR_ITEM
 {
                                                 : build_empty
  ATTR                                           : build
  ATTR ...                                       : build_exp
 } 
 
ATTR
 {
  Name                                           : build_name 
  Name ( ATTR_BODY )                             : build_name_body
  Name :: Name                                   : build_scope_name
  Name :: Name ( ATTR_BODY )                     : build_scope_name_body
 }
 
ATTR_BODY
 {
                                                 : start
  ATTR_BODY NBATOM                               : ext_atom
  ATTR_BODY ( ATTR_BODY )                        : ext_brackets
  ATTR_BODY [ ATTR_BODY ]                        : ext_square_brackets
  ATTR_BODY { ATTR_BODY `}                       : ext_figure_brackets
 }  
 
noneof NBATOM
 {
  ( ) [ ] { `}                                   : build
 }  

ATTR_ALIGN
 {
  alignas ( TYPE_ID_OR_EXPR_ASSIGN     )         : build
  alignas ( TYPE_ID_OR_EXPR_ASSIGN ... )         : build_exp
 } 

/*----- Ids ----------------------------------------------------------------------------*/

//
// defines
//
//   NAME  NESTED_NAME_SPEC  TYPE_NAME  DECLTYPE  TEMPLATE_ID  QUALIFIED_ID  UNQUALIFIED_ID
//
// required
//
//   EXPR  TYPE_ID_OR_EXPR_CONST_OR_EXPR_ID  CONVERSION_TYPE_ID
//

NAME
 {
                   Name                                    : build
  NESTED_NAME_SPEC Name                                    : build_nested
 }

NESTED_NAME_SPEC             // nested-name-specifier
 {
     TYPE_NAME ::                                          : start
  :: TYPE_NAME ::                                          : start_abs
      DECLTYPE ::                                          : start_decltype
  
  NESTED_NAME_SPEC                   Name ::               : ext
  NESTED_NAME_SPEC          TEMPLATE_ID.x ::               : if( x==simple ) ext_template
  NESTED_NAME_SPEC template TEMPLATE_ID.x ::               : if( x==simple ) ext_template_template
 }
 
TYPE_NAME                    // type-name
 {
  Name                                                     : build
  TEMPLATE_ID.x                                            : if( x==simple ) build_template
 }
 
DECLTYPE                     // decltype-specifier 
 {
  decltype ( EXPR )                                        : build
 }  
 
TEMPLATE_ID : simple,operator          // template-id
 {
  Name        < TEMPLATE_ARG_LIST >                        : build_simple    = simple
  OPERATOR_ID < TEMPLATE_ARG_LIST >                        : build_operator  = operator
  LITERAL_ID  < TEMPLATE_ARG_LIST >                        : build_literal   = operator
 } 
 
TEMPLATE_ARG_LIST            // template-argument-list-opt
 {
                                                           : empty
  NON_EMPTY_TEMPLATE_ARG_LIST                              : cast
 } 
 
NON_EMPTY_TEMPLATE_ARG_LIST  // template-argument-list
 {
  TEMPLATE_ARG_ITEM                                        : start
  NON_EMPTY_TEMPLATE_ARG_LIST , TEMPLATE_ARG_ITEM          : ext
 } 
 
TEMPLATE_ARG_ITEM
 {
  TEMPLATE_ARG                                             : build
  TEMPLATE_ARG ...                                         : build_exp
 }
 
TEMPLATE_ARG                 // template-argument
 {
  TYPE_ID_OR_EXPR_CONST_OR_EXPR_ID                         : build
 }  

QUALIFIED_ID : non_operator,operator   // qualified-id
 {
  NESTED_NAME_SPEC          UNQUALIFIED_ID.x               : if( x==non_operator ) build_nested@non_operator          = non_operator
  NESTED_NAME_SPEC          UNQUALIFIED_ID.x               : if( x==operator )     build_nested@operator              = operator
   
  NESTED_NAME_SPEC template UNQUALIFIED_ID.x               : if( x==non_operator ) build_nested_template@non_operator = non_operator
  NESTED_NAME_SPEC template UNQUALIFIED_ID.x               : if( x==operator )     build_nested_template@operator     = operator
   
  :: Name                                                  : build_name           = non_operator
  :: OPERATOR_ID                                           : build_operator       = operator
  :: LITERAL_ID                                            : build_literal        = operator
  :: TEMPLATE_ID                                           : build_template       = non_operator
 } 
 
UNQUALIFIED_ID : non_operator,operator // unqualified-id
 {
  Name                                                     : build_name           = non_operator
  OPERATOR_ID                                              : build_operator       = operator
  LITERAL_ID                                               : build_literal        = operator
  TEMPLATE_ID                                              : build_template       = non_operator
  
  CONVERSION_ID                                            : build_conversion     = operator
  
  ~ TYPE_NAME                                              : build_dtor           = non_operator
  ~ DECLTYPE                                               : build_dtor_decltype  = non_operator
 } 
 
CONVERSION_ID                // conversion-function-id
 {
  operator CONVERSION_TYPE_ID                              : build
 }
 
OPERATOR_ID                  // operator-function-id
 {
  operator OPID                                            : build
 }
 
OPID
 {
  new                                                      : build_new 
  delete                                                   : build_delete
  new [ ]                                                  : build_array_new
  delete [ ]                                               : build_array_delete
  
  +                                                        : build_plus
  -                                                        : build_minus 
  *                                                        : build_mul
  /                                                        : build_div
  %                                                        : build_rem
  ^                                                        : build_bitxor
  &                                                        : build_bitand
  |                                                        : build_bitor
  ~                                                        : build_bitnot
  !                                                        : build_not
  =                                                        : build_set
  
  <                                                        : build_LT
  >                                                        : build_GT
  
  +=                                                       : build_plus_set
  -=                                                       : build_minus_set
  *=                                                       : build_mul_set
  /=                                                       : build_div_set
  %=                                                       : build_rem_set
  ^=                                                       : build_bitxor_set
  &=                                                       : build_bitand_set
  |=                                                       : build_bitor_set
  <<                                                       : build_lshift
  <<=                                                      : build_lshift_set
  >>                                                       : build_rshift
  >>=                                                      : build_rshift_set
  
  ==                                                       : build_EQ
  !=                                                       : build_NE
  <=                                                       : build_LE
  >=                                                       : build_GE
  
  &&                                                       : build_and
  ||                                                       : build_or
  ++                                                       : build_inc
  --                                                       : build_dec
  ,                                                        : build_combine
  ->*                                                      : build_member_ptr
  ->                                                       : build_member
  ( )                                                      : build_call
  [ ]                                                      : build_index
 } 
 
LITERAL_ID                   // literal-operator-id
 {
  operator "" Name                                         : build
 }   
 
/*----- Enums --------------------------------------------------------------------------*/

//
// define
//
//   DECL_OPAQUE_ENUM  ENUM_SPEC  
//
// required
//
//   ATTRIBUTES  NAME  EXPR_CONST  TYPE_SPEC_LIST
//

DECL_OPAQUE_ENUM             // opaque-enum-declaration
 {
  ENUM_KEY ATTRIBUTES Name           ;                     : build
  ENUM_KEY ATTRIBUTES Name ENUM_BASE ;                     : build_base
 }
 
ENUM_SPEC                    // enum-specifier
 {
  ENUM_HEAD {  `}                                          : build
  ENUM_HEAD { ENUM_LIST `}                                 : build_list
  ENUM_HEAD { ENUM_LIST , `}                               : build_list_comma
 }
  
ENUM_HEAD                    
 {
  ENUM_KEY ATTRIBUTES                                      : build 
  ENUM_KEY ATTRIBUTES      ENUM_BASE                       : build_base
  ENUM_KEY ATTRIBUTES NAME                                 : build_name
  ENUM_KEY ATTRIBUTES NAME ENUM_BASE                       : build_name_base
 } 
 
ENUM_LIST                    
 {
  ENUM_DEF                                                 : start
  ENUM_LIST , ENUM_DEF                                     : ext
 }
 
ENUM_DEF                     
 {
  Name                                                     : build
  Name = EXPR_CONST                                        : build_expr
 } 
 
ENUM_BASE                    
 {
  `: TYPE_SPEC_LIST.x                                      : if( x==no_type | x==type ) build
 } 

ENUM_KEY : enum,enum_class   
 {
  enum                                                     : build_enum         = enum 
  enum class                                               : build_enum_class   = enum_class
  enum struct                                              : build_enum_struct  = enum_class
 }
  
/*----- Init ---------------------------------------------------------------------------*/

//
// define
//
//  INIT  BRACE_OR_EQUAL_INIT  INIT_CLAUSE  BRACED_INIT_LIST
//
// required
//
//   EXPR_ASSIGN
//
 
INIT : assign,braced,list              // initializer
 {
  = INIT_CLAUSE                                  : build         = assign
  BRACED_INIT_LIST                               : build_braced  = braced
  ( INIT_LIST )                                  : build_list    = list
 } 
 
INIT_CLAUSE                  // initializer-clause
 {
  EXPR_ASSIGN                                    : build
  BRACED_INIT_LIST                               : build_list
 }
  
BRACED_INIT_LIST             // braced-init-list
 {
  { `}                                           : build_empty
  { INIT_LIST  `}                                : build
  { INIT_LIST , `}                               : build_comma
 }

INIT_LIST                    // initializer-list // expressiont-list
 {
  INIT_EXP                                       : start
  INIT_LIST , INIT_EXP                           : ext
 } 
 
INIT_EXP
 {
  INIT_CLAUSE                                    : build
  INIT_CLAUSE ...                                : build_exp
 }
  
//-------------------------------------------

EXPR_CONST // constant-expression
 {
  TODO_EXPR_CONST : build
 }
 
EXPR // expr
 {
  TODO_EXPR : build
 }  

EXPR_ASSIGN // assignment-expression
 {
  TODO_EXPR_ASSIGN : build
 }
   
TYPE_ID_OR_EXPR_ASSIGN // type-id | assignment-expression // for alignas 
 {
  TODO_TYPE_ID_OR_EXPR_ASSIGN : build
 }
 
TYPE_ID_OR_EXPR_CONST_OR_EXPR_ID // type-id | constant-expression | id-expression // for TEMPLATE_ARG 
 {
  TODO_TYPE_ID_OR_EXPR_CONST : build 
 }  
 
CONVERSION_TYPE_ID // conversion-type-id
 {
  TODO_CONVERSION_TYPE_ID : build
 } 

TYPE_SPEC_LIST : no_type,type 
 {
  TODO_TYPE_SPEC_LIST1 : build@no_type = no_type
  TODO_TYPE_SPEC_LIST2 : build@type    = type
 }

 